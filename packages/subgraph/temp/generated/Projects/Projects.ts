// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ChallengeHandle extends ethereum.Event {
  get params(): ChallengeHandle__Params {
    return new ChallengeHandle__Params(this);
  }
}

export class ChallengeHandle__Params {
  _event: ChallengeHandle;

  constructor(event: ChallengeHandle) {
    this._event = event;
  }

  get handle(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get challengeExpiry(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ClaimHandle extends ethereum.Event {
  get params(): ClaimHandle__Params {
    return new ClaimHandle__Params(this);
  }
}

export class ClaimHandle__Params {
  _event: ClaimHandle;

  constructor(event: ClaimHandle) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get projectId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get handle(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Create extends ethereum.Event {
  get params(): Create__Params {
    return new Create__Params(this);
  }
}

export class Create__Params {
  _event: Create;

  constructor(event: Create) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get handle(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get uri(): string {
    return this._event.parameters[3].value.toString();
  }

  get terminal(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class RenewHandle extends ethereum.Event {
  get params(): RenewHandle__Params {
    return new RenewHandle__Params(this);
  }
}

export class RenewHandle__Params {
  _event: RenewHandle;

  constructor(event: RenewHandle) {
    this._event = event;
  }

  get handle(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get projectId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SetHandle extends ethereum.Event {
  get params(): SetHandle__Params {
    return new SetHandle__Params(this);
  }
}

export class SetHandle__Params {
  _event: SetHandle;

  constructor(event: SetHandle) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get handle(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SetUri extends ethereum.Event {
  get params(): SetUri__Params {
    return new SetUri__Params(this);
  }
}

export class SetUri__Params {
  _event: SetUri;

  constructor(event: SetUri) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferHandle extends ethereum.Event {
  get params(): TransferHandle__Params {
    return new TransferHandle__Params(this);
  }
}

export class TransferHandle__Params {
  _event: TransferHandle;

  constructor(event: TransferHandle) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get handle(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get newHandle(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Projects extends ethereum.SmartContract {
  static bind(address: Address): Projects {
    return new Projects("Projects", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  challengeExpiryOf(param0: Bytes): BigInt {
    let result = super.call(
      "challengeExpiryOf",
      "challengeExpiryOf(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_challengeExpiryOf(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "challengeExpiryOf",
      "challengeExpiryOf(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  count(): BigInt {
    let result = super.call("count", "count():(uint256)", []);

    return result[0].toBigInt();
  }

  try_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("count", "count():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  create(
    _owner: Address,
    _handle: Bytes,
    _uri: string,
    _terminal: Address
  ): BigInt {
    let result = super.call(
      "create",
      "create(address,bytes32,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromFixedBytes(_handle),
        ethereum.Value.fromString(_uri),
        ethereum.Value.fromAddress(_terminal)
      ]
    );

    return result[0].toBigInt();
  }

  try_create(
    _owner: Address,
    _handle: Bytes,
    _uri: string,
    _terminal: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "create",
      "create(address,bytes32,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromFixedBytes(_handle),
        ethereum.Value.fromString(_uri),
        ethereum.Value.fromAddress(_terminal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exists(_projectId: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_projectId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(_projectId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_projectId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  handleOf(param0: BigInt): Bytes {
    let result = super.call("handleOf", "handleOf(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_handleOf(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("handleOf", "handleOf(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  operatorStore(): Address {
    let result = super.call("operatorStore", "operatorStore():(address)", []);

    return result[0].toAddress();
  }

  try_operatorStore(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "operatorStore",
      "operatorStore():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  projectFor(param0: Bytes): BigInt {
    let result = super.call("projectFor", "projectFor(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_projectFor(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("projectFor", "projectFor(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  transferAddressFor(param0: Bytes): Address {
    let result = super.call(
      "transferAddressFor",
      "transferAddressFor(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_transferAddressFor(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "transferAddressFor",
      "transferAddressFor(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transferHandle(_projectId: BigInt, _to: Address, _newHandle: Bytes): Bytes {
    let result = super.call(
      "transferHandle",
      "transferHandle(uint256,address,bytes32):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_projectId),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromFixedBytes(_newHandle)
      ]
    );

    return result[0].toBytes();
  }

  try_transferHandle(
    _projectId: BigInt,
    _to: Address,
    _newHandle: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "transferHandle",
      "transferHandle(uint256,address,bytes32):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_projectId),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromFixedBytes(_newHandle)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  uriOf(param0: BigInt): string {
    let result = super.call("uriOf", "uriOf(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uriOf(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uriOf", "uriOf(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _operatorStore(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ChallengeHandleCall extends ethereum.Call {
  get inputs(): ChallengeHandleCall__Inputs {
    return new ChallengeHandleCall__Inputs(this);
  }

  get outputs(): ChallengeHandleCall__Outputs {
    return new ChallengeHandleCall__Outputs(this);
  }
}

export class ChallengeHandleCall__Inputs {
  _call: ChallengeHandleCall;

  constructor(call: ChallengeHandleCall) {
    this._call = call;
  }

  get _handle(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ChallengeHandleCall__Outputs {
  _call: ChallengeHandleCall;

  constructor(call: ChallengeHandleCall) {
    this._call = call;
  }
}

export class ClaimHandleCall extends ethereum.Call {
  get inputs(): ClaimHandleCall__Inputs {
    return new ClaimHandleCall__Inputs(this);
  }

  get outputs(): ClaimHandleCall__Outputs {
    return new ClaimHandleCall__Outputs(this);
  }
}

export class ClaimHandleCall__Inputs {
  _call: ClaimHandleCall;

  constructor(call: ClaimHandleCall) {
    this._call = call;
  }

  get _handle(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _for(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _projectId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimHandleCall__Outputs {
  _call: ClaimHandleCall;

  constructor(call: ClaimHandleCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _handle(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _uri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _terminal(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenewHandleCall extends ethereum.Call {
  get inputs(): RenewHandleCall__Inputs {
    return new RenewHandleCall__Inputs(this);
  }

  get outputs(): RenewHandleCall__Outputs {
    return new RenewHandleCall__Outputs(this);
  }
}

export class RenewHandleCall__Inputs {
  _call: RenewHandleCall;

  constructor(call: RenewHandleCall) {
    this._call = call;
  }

  get _projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RenewHandleCall__Outputs {
  _call: RenewHandleCall;

  constructor(call: RenewHandleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetHandleCall extends ethereum.Call {
  get inputs(): SetHandleCall__Inputs {
    return new SetHandleCall__Inputs(this);
  }

  get outputs(): SetHandleCall__Outputs {
    return new SetHandleCall__Outputs(this);
  }
}

export class SetHandleCall__Inputs {
  _call: SetHandleCall;

  constructor(call: SetHandleCall) {
    this._call = call;
  }

  get _projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _handle(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetHandleCall__Outputs {
  _call: SetHandleCall;

  constructor(call: SetHandleCall) {
    this._call = call;
  }
}

export class SetUriCall extends ethereum.Call {
  get inputs(): SetUriCall__Inputs {
    return new SetUriCall__Inputs(this);
  }

  get outputs(): SetUriCall__Outputs {
    return new SetUriCall__Outputs(this);
  }
}

export class SetUriCall__Inputs {
  _call: SetUriCall;

  constructor(call: SetUriCall) {
    this._call = call;
  }

  get _projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetUriCall__Outputs {
  _call: SetUriCall;

  constructor(call: SetUriCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferHandleCall extends ethereum.Call {
  get inputs(): TransferHandleCall__Inputs {
    return new TransferHandleCall__Inputs(this);
  }

  get outputs(): TransferHandleCall__Outputs {
    return new TransferHandleCall__Outputs(this);
  }
}

export class TransferHandleCall__Inputs {
  _call: TransferHandleCall;

  constructor(call: TransferHandleCall) {
    this._call = call;
  }

  get _projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _newHandle(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class TransferHandleCall__Outputs {
  _call: TransferHandleCall;

  constructor(call: TransferHandleCall) {
    this._call = call;
  }

  get _handle(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
