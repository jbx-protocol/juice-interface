// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Project entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Project entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Project", id.toString(), this);
  }

  static load(id: string): Project | null {
    return store.get("Project", id) as Project | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get handle(): string {
    let value = this.get("handle");
    return value.toString();
  }

  set handle(value: string) {
    this.set("handle", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (value === null) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(value as string));
    }
  }
}

export class PayEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PayEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PayEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PayEvent", id.toString(), this);
  }

  static load(id: string): PayEvent | null {
    return store.get("PayEvent", id) as PayEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fundingCycleId(): BigInt {
    let value = this.get("fundingCycleId");
    return value.toBigInt();
  }

  set fundingCycleId(value: BigInt) {
    this.set("fundingCycleId", Value.fromBigInt(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get note(): string | null {
    let value = this.get("note");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set note(value: string | null) {
    if (value === null) {
      this.unset("note");
    } else {
      this.set("note", Value.fromString(value as string));
    }
  }
}

export class PrintPremineEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PrintPremineEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PrintPremineEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PrintPremineEvent", id.toString(), this);
  }

  static load(id: string): PrintPremineEvent | null {
    return store.get("PrintPremineEvent", id) as PrintPremineEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get currency(): BigInt {
    let value = this.get("currency");
    return value.toBigInt();
  }

  set currency(value: BigInt) {
    this.set("currency", Value.fromBigInt(value));
  }

  get memo(): string | null {
    let value = this.get("memo");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set memo(value: string | null) {
    if (value === null) {
      this.unset("memo");
    } else {
      this.set("memo", Value.fromString(value as string));
    }
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }
}

export class TapEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TapEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TapEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TapEvent", id.toString(), this);
  }

  static load(id: string): TapEvent | null {
    return store.get("TapEvent", id) as TapEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fundingCycleId(): BigInt {
    let value = this.get("fundingCycleId");
    return value.toBigInt();
  }

  set fundingCycleId(value: BigInt) {
    this.set("fundingCycleId", Value.fromBigInt(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get currency(): BigInt {
    let value = this.get("currency");
    return value.toBigInt();
  }

  set currency(value: BigInt) {
    this.set("currency", Value.fromBigInt(value));
  }

  get netTransferAmount(): BigInt {
    let value = this.get("netTransferAmount");
    return value.toBigInt();
  }

  set netTransferAmount(value: BigInt) {
    this.set("netTransferAmount", Value.fromBigInt(value));
  }

  get beneficiaryTransferAmount(): BigInt {
    let value = this.get("beneficiaryTransferAmount");
    return value.toBigInt();
  }

  set beneficiaryTransferAmount(value: BigInt) {
    this.set("beneficiaryTransferAmount", Value.fromBigInt(value));
  }

  get govFeeAmount(): BigInt {
    let value = this.get("govFeeAmount");
    return value.toBigInt();
  }

  set govFeeAmount(value: BigInt) {
    this.set("govFeeAmount", Value.fromBigInt(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }
}

export class RedeemEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RedeemEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RedeemEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RedeemEvent", id.toString(), this);
  }

  static load(id: string): RedeemEvent | null {
    return store.get("RedeemEvent", id) as RedeemEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get holder(): Bytes {
    let value = this.get("holder");
    return value.toBytes();
  }

  set holder(value: Bytes) {
    this.set("holder", Value.fromBytes(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get returnAmount(): BigInt {
    let value = this.get("returnAmount");
    return value.toBigInt();
  }

  set returnAmount(value: BigInt) {
    this.set("returnAmount", Value.fromBigInt(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }
}

export class PrintReservesEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PrintReservesEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PrintReservesEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PrintReservesEvent", id.toString(), this);
  }

  static load(id: string): PrintReservesEvent | null {
    return store.get("PrintReservesEvent", id) as PrintReservesEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fundingCycleId(): BigInt {
    let value = this.get("fundingCycleId");
    return value.toBigInt();
  }

  set fundingCycleId(value: BigInt) {
    this.set("fundingCycleId", Value.fromBigInt(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get beneficiaryTicketAmount(): BigInt {
    let value = this.get("beneficiaryTicketAmount");
    return value.toBigInt();
  }

  set beneficiaryTicketAmount(value: BigInt) {
    this.set("beneficiaryTicketAmount", Value.fromBigInt(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }
}

export class ConfigureEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ConfigureEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ConfigureEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ConfigureEvent", id.toString(), this);
  }

  static load(id: string): ConfigureEvent | null {
    return store.get("ConfigureEvent", id) as ConfigureEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fundingCycleId(): BigInt {
    let value = this.get("fundingCycleId");
    return value.toBigInt();
  }

  set fundingCycleId(value: BigInt) {
    this.set("fundingCycleId", Value.fromBigInt(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }
}
