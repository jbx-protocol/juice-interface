import { NftRewardsContext } from 'contexts/NftRewards/NftRewardsContext'
import useNftRewards from 'contexts/NftRewards/useNftRewards'
import { ProjectMetadataContext } from 'contexts/shared/ProjectMetadataContext'
import { V2V3ProjectContext } from 'contexts/v2v3/Project/V2V3ProjectContext'
import { useNftCollectionMetadataUri } from 'hooks/JB721Delegate/contractReader/useNftCollectionMetadataUri'
import { useNftCollectionPricingContext } from 'hooks/JB721Delegate/contractReader/useNftCollectionPricingContext'
import { useNftFlagsOf } from 'hooks/JB721Delegate/contractReader/useNftFlagsOf'
import { useNftTiers } from 'hooks/JB721Delegate/contractReader/useNftTiers'
import { JB721GovernanceType, NftRewardTier } from 'models/nftRewards'
import { useContext, useMemo } from 'react'
import {
  DEFAULT_NFT_FLAGS,
  DEFAULT_NFT_PRICING,
  EMPTY_NFT_COLLECTION_METADATA,
} from 'redux/slices/editingV2Project'
import { CIDsOfNftRewardTiersResponse } from 'utils/nftRewards'
import { JB721DelegateContractsContext } from './JB721DelegateContracts/JB721DelegateContractsContext'

const RS_PROJECT_ID = 618

const RS_CIDS = [
  'QmSdt8VRzhs4Q3mwLQxBKfWLM5DcuDwu1EnWNS2q6nHCKs',
  'QmPMeVGdasCn9zXsaCGVBsWMhwLE9kf8jfoSEWEvk3c7M5',
  'QmVceUeK98b6NsKtBEsWE3jbVbott2TuHhXQ4vHGocJogr',
  'QmXvWCBAJsyQ7FJXyuQN2XfhEHhBj7UNkadtcYTTFDSGcw',
  'QmVfQKcmCuz9JBVMDxse5Zd3iGx6qHCdMMm9fHPWVHAk8e',
]

const RS_TIERS: NftRewardTier[] = [
  {
    id: 6,
    name: 'Privacy Matters',
    description:
      'NFT reward for supporting the Free Alexey & Roman fundraiser. Artwork generated by AI.',
    contributionFloor: 0.15,
    maxSupply: 2500,
    remainingSupply: 2500,
    fileUrl:
      'https://jbm.infura-ipfs.io/ipfs/QmPjCWuxP6JmE5Fru4ctNtZ7YnQxdjMVcKqVUuuvnYjjAX',
    beneficiary: '0x0000000000000000000000000000000000000000',
    reservedRate: 0,
    votingWeight: '0',
    externalLink: undefined,
  },
  {
    id: 2,
    name: 'Open Source Is Not A Crime',
    description:
      'NFT reward for supporting the Free Alexey & Roman fundraiser. Artwork generated by AI.',
    contributionFloor: 0.5,
    maxSupply: 1000,
    remainingSupply: 967,
    fileUrl:
      'https://jbm.infura-ipfs.io/ipfs/Qmer2MT53PAjeQ6CjdUvXQvRFWsrK1PKam8xtkdoAjSrLc',
    beneficiary: '0x0000000000000000000000000000000000000000',
    reservedRate: 0,
    votingWeight: '0',
    externalLink: undefined,
  },
  {
    id: 3,
    name: 'Free Alexey',
    description:
      'NFT reward for supporting the Free Alexey & Roman fundraiser. Artwork created by @EyreSofia.',
    contributionFloor: 1,
    maxSupply: 200,
    remainingSupply: 167,
    fileUrl:
      'https://jbm.infura-ipfs.io/ipfs/QmXWAeCpUdLYrzYbpxWq4Ajnhf5trssicHPwGRkPWY5Fx9',
    beneficiary: '0x0000000000000000000000000000000000000000',
    reservedRate: 0,
    votingWeight: '0',
    externalLink: undefined,
  },
  {
    id: 4,
    name: 'Free Roman',
    description:
      'NFT reward for supporting the Free Alexey & Roman fundraiser. Artwork created by @EyreSofia.',
    contributionFloor: 1,
    maxSupply: 200,
    remainingSupply: 175,
    fileUrl:
      'https://jbm.infura-ipfs.io/ipfs/QmT9hZuHJjGidc8nrdZYskwRbr2hai9rwVodjCuvUNTvKL',
    beneficiary: '0x0000000000000000000000000000000000000000',
    reservedRate: 0,
    votingWeight: '0',
    externalLink: undefined,
  },
  {
    id: 5,
    name: 'Code Is Speech',
    description:
      'NFT reward for supporting the Free Alexey & Roman fundraiser. Artwork generated by AI, and customized by the team.',
    contributionFloor: 10,
    maxSupply: 20,
    remainingSupply: 10,
    fileUrl:
      'https://jbm.infura-ipfs.io/ipfs/QmcA9nwXrNm1QjZ6Reapzcm91xSjJfxAhZP7aopo5xF4iZ',
    beneficiary: '0x0000000000000000000000000000000000000000',
    reservedRate: 0,
    votingWeight: '0',
    externalLink: undefined,
  },
]

export const NftRewardsProvider: React.FC<React.PropsWithChildren<unknown>> = ({
  children,
}) => {
  const { fundingCycleMetadata } = useContext(V2V3ProjectContext)
  const { projectMetadata, projectId } = useContext(ProjectMetadataContext)
  const { version: JB721DelegateVersion } = useContext(
    JB721DelegateContractsContext,
  )

  const dataSourceAddress = fundingCycleMetadata?.dataSource

  // don't fetch stuff if there's no datasource in the first place.
  const hasNftRewards = Boolean(JB721DelegateVersion)

  // fetch NFT tier data from the contract
  const { data: nftRewardTiersResponse, loading: nftRewardsCIDsLoading } =
    useNftTiers({
      dataSourceAddress,
      shouldFetch: hasNftRewards,
    })

  // catchall to ensure nfts are never loaded if hasNftRewards is false (there's no datasource).
  const tierData = hasNftRewards ? nftRewardTiersResponse ?? [] : []
  const loadedCIDs = CIDsOfNftRewardTiersResponse(tierData)

  const { data: pricing } = useNftCollectionPricingContext()

  // fetch NFT metadata (its image, name etc.) from ipfs
  const { data: loadedRewardTiers, isLoading: nftRewardTiersLoading } =
    useNftRewards(tierData, projectId, dataSourceAddress)

  // Roman storm specific stuff, cached data

  const rewardTiers = useMemo(() => {
    if (projectId !== RS_PROJECT_ID) return loadedRewardTiers

    if (!loadedRewardTiers?.length) return RS_TIERS
    return loadedRewardTiers
  }, [projectId, loadedRewardTiers])

  const CIDs = useMemo(() => {
    if (projectId !== RS_PROJECT_ID) return loadedCIDs

    if (!loadedCIDs?.length) return RS_CIDS
    return loadedCIDs
  }, [projectId, loadedCIDs])

  const nftsLoading = useMemo(() => {
    if (projectId !== RS_PROJECT_ID)
      return Boolean(nftRewardTiersLoading || nftRewardsCIDsLoading)
    return false // Roman storm is cached so we don't need to load anything
  }, [nftRewardTiersLoading, nftRewardsCIDsLoading, projectId])

  // fetch some other related stuff
  const { data: collectionMetadataUri } =
    useNftCollectionMetadataUri(dataSourceAddress)
  const { data: flags } = useNftFlagsOf(dataSourceAddress)

  const contextData = {
    nftRewards: {
      rewardTiers,
      pricing: pricing ?? DEFAULT_NFT_PRICING,
      // TODO: Load governance type
      governanceType: JB721GovernanceType.NONE,
      CIDs,
      collectionMetadata: {
        ...EMPTY_NFT_COLLECTION_METADATA, // only load the metadata CID in the context - other data not necessary
        uri: collectionMetadataUri,
      },
      postPayModal: projectMetadata?.nftPaymentSuccessModal,
      flags: flags ?? DEFAULT_NFT_FLAGS,
    },
    loading: nftsLoading,
  }

  return (
    <NftRewardsContext.Provider value={contextData}>
      {children}
    </NftRewardsContext.Provider>
  )
}
